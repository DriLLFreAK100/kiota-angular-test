/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createApiResponseFromDiscriminatorValue, serializeApiResponse, type ApiResponse } from '../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UploadImagePostRequestBody}
 */
// @ts-ignore
export function createUploadImagePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUploadImagePostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUploadImagePostRequestBody(uploadImagePostRequestBody: Partial<UploadImagePostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "additionalMetadata": n => { uploadImagePostRequestBody.additionalMetadata = n.getStringValue(); },
        "file": n => { uploadImagePostRequestBody.file = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUploadImagePostRequestBody(writer: SerializationWriter, uploadImagePostRequestBody: Partial<UploadImagePostRequestBody> | undefined | null = {}) : void {
    if (uploadImagePostRequestBody) {
        writer.writeStringValue("additionalMetadata", uploadImagePostRequestBody.additionalMetadata);
        writer.writeObjectValue("file", uploadImagePostRequestBody.file);
        writer.writeAdditionalData(uploadImagePostRequestBody.additionalData);
    }
}
export interface UploadImagePostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Additional data to pass to server
     */
    additionalMetadata?: string | null;
    /**
     * file to upload
     */
    file?: String | null;
}
/**
 * Builds and executes requests for operations under /pet/{petId}/uploadImage
 */
export interface UploadImageRequestBuilder extends BaseRequestBuilder<UploadImageRequestBuilder> {
    /**
     * uploads an image
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApiResponse>}
     */
     post(body: UploadImagePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ApiResponse | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: UploadImagePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const UploadImageRequestBuilderUriTemplate = "{+baseurl}/pet/{petId}/uploadImage";
/**
 * Metadata for all the requests in the request builder.
 */
export const UploadImageRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: UploadImageRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createApiResponseFromDiscriminatorValue,
        requestBodyContentType: "multipart/form-data",
        requestBodySerializer: serializeUploadImagePostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
